                    МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
   ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



                           Кафедра Програмної інженерії




                                        Звіт
                             з лабораторної роботи № 1
                    з дисципліни: «Скриптові мови програмування»
з теми: «Розробка Bash-скрипту для конвертації розкладу CIST NURE у формат
                                 Google Календар»




Виконав:                                                                Перевірив:
ст. гр. ПЗПІ-23-2                                                  ст. викл. каф. ПІ
Ситник Є. С.                                                         Сокорчук І. П.




                                   Харків – 2025
                                                                                 2
1 РОЗРОБКА BASH-СКРИПТУ ДЛЯ КОНВЕРТАЦІЇ РОЗКЛАДУ CIST NURE
                         У ФОРМАТ GOOGLE КАЛЕНДАР
      1.1 Мета роботи

       –   Ознайомитись з основними командами Bash для роботи з файлами та
           текстовими даними.
       –   Навчитись використовувати команди «select», «ls», «awk», «sort», «uniq»,
           «tee», «cat», «sed», «iconv», тощо.
       –   Розробити Bash-скрипт для перетворення CSV файла розкладу занять у
           формат для імпорту в Google Календар.

      1.2 Хід роботи

      1.2.1 Огляд завдання

      Завдання полягало у розробці скрипта для обробки експортованого з сайту
cist.nure.ua розкладу занять у форматі CSV та перетворення його у формат, сумісний
з Google Календарем. Скрипт повинен підтримувати різні параметри командного
рядка, вибір файлів та груп студентів, а також забезпечувати належне форматування
даних для успішного імпорту в Google Календар.

      1.2.2 Реалізація

      Реалізований Bash-скрипт складається з декількох основних функціональних
блоків.
      Спочатку реалізовано дві допоміжні функції. Функція «error()» відповідає
за виведення повідомлень про помилки та завершення роботи скрипта із заданим
кодом виходу. Вона приймає два параметри: текст помилки та код помилки, після
чого перенаправляє текст помилки у потік помилок («stderr») за допомогою «>&2».
1   error() {
2       echo "Error: $1." >&2;
3       exit $2;
4   }
      Функція «select_from()» забезпечує інтерактивний вибір елементів із списку
через меню. Вона обробляє як випадок, коли у списку лише один елемент
(автоматично його вибирає), так і випадок з декількома елементами, коли
                                                                               3
користувачу надається меню вибору. Команда «select» дозволяє створити меню для
вибору опцій, з яких користувач може вибрати потрібний варіант або вийти з вибору
за допомогою опції «quit».
 1 select_from(){
 2     if [ -n "$2" -a $(echo "$1" | wc -l) -eq 1 ]; then echo "$1";
   return 0; fi
 3
 4     select selected in quit $1; do
 5          case "$selected" in
 6               '') continue ;;
 7               'quit') return 1 ;;
 8               *) echo "$selected"; return 0 ;;
 9          esac
10     done
11 }
      Скрипт підтримує наступні ключі командного рядка: «–version» для
виведення інформації про версію скрипта, «–help» для виведення довідки про
використання скрипта, та «-q» або «–quiet» для вимкнення виведення даних в
стандартний потік виведення. Це реалізовано через перевірку значення першого
аргументу командного рядка.
 1 if [ "$1" = "--version" ]; then echo 'cist converter 1.0'; exit 0; fi
 2 if [ "$1" = "--help" ]; then
 3     echo "Usage: $0 [--help | --version] | [-q|--quiet] [[академ_група]
   файл_із_cist.csv]"
 4     echo 'Convert schedule.csv from CIST format into Google Calendar
   format'
 5     echo -e " --help \t\tPrint this help message and exit"
 6     echo -e " --version \t\tPrint version info and exit"
 7     echo -e " -q, --quiet \t\tDo not print the result to stdout"
 8     echo -e " академ_група \t\tOptional group name"
 9     echo -e " файл_із_cist.csv \tCSV file to process"
10     exit 0;
11 fi
      Для   підтримки    опції   «–quiet»   використовується    перенаправлення
стандартного потоку виведення через файловий дескриптор 3. Команда «exec 3>&1»
створює новий файловий дескриптор, що вказує на стандартний потік виведення, а
«exec 3>/dev/null» перенаправляє його в «/dev/null» для режиму «–quiet», блокуючи
виведення результату на екран.
1   exec 3>&1;
2   if [ "$1" = "-q" -o "$1" = "--quiet" ]; then exec 3>/dev/null; shift; fi
      Якщо файл не вказано через аргументи командного рядка, скрипт шукає
доступні CSV файли в поточній директорії за шаблоном «TimeTable_??_??
_20??.csv» за допомогою команди «ls» та пропонує вибрати один з них,
                                                                              4
використовуючи функцію «select_from». Після вибору файлу скрипт перевіряє
його наявність та права доступу, використовуючи умовні оператори з флагами «-
f» (існування файлу) та «-r» (можливість читання).
1   if [ -z "$csv" ]; then csv=$(select_from "$csvs") || exit 0; fi
2
3   if [ ! -f "$csv" ]; then error "file '$csv' is not exist" 1; fi
4   if [ ! -r "$csv" ]; then error "permission to read file '$csv' denied"
    2; fi
      Далі скрипт зчитує вміст файлу за допомогою команди «cat», заміняє символи
повернення каретки на переноси рядків за допомогою команди «sed ’s/r/n/g’»
та конвертує текст з Windows-1251 в UTF-8 за допомогою «iconv -f cp1251 -
t utf8». Потім формується список доступних академічних груп за допомогою
команди «awk», яка обробляє рядки файлу CSV з використанням змінної FPAT для
коректного розбиття полів даних, розділених комами. Отриманий список сортується
(«sort») та з нього видаляються дублікати («uniq»).
 1 csv_data=$( cat "$csv" | sed 's/\r/\n/g' | iconv -f cp1251 -t utf8 )
 2
 3 groups=$(
 4     echo "$csv_data" \
 5     | awk -v FPAT='[^,]*|"[^"]*"' '
 6         NR > 1 {
 7              gsub(/^"/, "", $1);
 8              if (split($1, res, " - ") != 1) print res[1]
 9         }
10     ' \
11     | sort \
12     | uniq
13 )
      Якщо група не вказана через аргументи командного рядка, скрипт пропонує
вибрати групу зі списку за допомогою функції «select_from». Якщо група не
знайдена у вибраному файлі, скрипт повідомляє про це користувача та пропонує
вибрати іншу групу.
1   if [ -z "$group" ]; then group=$(select_from "$groups" "skip") || exit
    0; fi
      Основний процес перетворення даних здійснюється за допомогою команди
«awk», яка обробляє CSV дані, фільтрує рядки відповідно до обраної групи, та
форматує дані для Google Календаря. Всередині «awk» визначаються дві функції:
«time_fmt()» для перетворення часу з формату «HH:MM:SS» у формат «HH:MM
AM/PM», та «date_fmt()» для перетворення дати з формату «DD.MM.YYYY»
у формат «MM/DD/YYYY». Обидві функції використовують «strftime()» та
                                                                                   5
«mktime()» для конвертації форматів. Для кожного рядка, що відповідає обраній
групі, скрипт форматує поля «Subject», «Start Date», «Start Time», «End Date»,
«End Time» та «Description» відповідно до вимог Google Календаря. Результат
зберігається у файл з префіксом «Google_» та виводиться на екран за допомогою
команди «tee», якщо не вказано ключ «–quiet».
 1 echo "$csv_data" \
 2 | awk -v FPAT='[^,]*|"[^"]*"' -v pattern="$([ -n "$group" ] && echo
   "^\"$group - ")" '
 3     function time_fmt(time) {
 4         gsub(/:|"/, " ", time)
 5         return strftime("%I:%M %p", mktime("1970 01 01" time))
 6     }
 7
 8     function date_fmt(date) {
 9         gsub(/"/, "", date)
10         split(date, dp, ".")
11         return strftime("%m/%d/%Y", mktime(dp[3] " " dp[2] " " dp[1] "
   00 00 00"))
12     }
13
14     NR==1 { print "Subject,Start Date,Start Time,End Date,End
   Time,Description" }
15
16     NR!=1 && $1 ~ pattern {
17         gsub(pattern "|^\"|\"$", "", $1)
18
19         printf("\"%s; №%d\",%s,%s,%s,%s,%s\n",
20             $1, ++lessons[$2], date_fmt($2), time_fmt($3),
   date_fmt($4), time_fmt($5), $12)
21     }
22 ' \
23 | tee "Google_$(basename "$csv")" >&3


      1.3 Висновки

      У ході виконання лабораторної роботи було розроблено скрипт командного
інтерпретатора Bash для перетворення формату CSV файлів розкладу занять із
системи CIST ХНУРЕ у формат, придатний для імпорту в Google Календар.
      Скрипт має гнучкий інтерфейс командного рядка з підтримкою різних опцій
та аргументів, а також забезпечує належну обробку помилок. Він демонструє
ефективне використання базових команд Bash для роботи з файлами та обробки
текстових даних, включаючи «select», «ls», «awk», «sort», «uniq», «tee», «cat», «sed»
та «iconv».
      Основні навички, отримані при виконанні роботи:
                                                                            6
      –   Використання перенаправлення потоків даних в Bash
      –   Створення інтерактивних меню за допомогою команди «select»
      –   Обробка структурованих текстових даних за допомогою «awk»
      –   Конвертація форматів дати та часу
      –   Робота з кодуваннями символів
     Розроблений скрипт повністю відповідає поставленим вимогам та може бути
використаний для автоматизації процесу імпорту розкладу занять із системи CIST
у Google Календар.
                                                                         7
                                 ДОДАТОК А
                     Повний текст розробленого скрипта

1   #!/bin/bash
2
3   error() {
4       echo "Error: $1." >&2;
5       exit $2;
6   }
7
8   select_from(){
9       if [ -n "$2" -a $(echo "$1" | wc -l) -eq 1 ]; then echo "$1";
    return 0; fi
10
11     select selected in quit $1; do
12          case "$selected" in
13               '') continue ;;
14               'quit') return 1 ;;
15               *) echo "$selected"; return 0 ;;
16          esac
17     done
18 }
19
20 if [ "$1" = "--version" ]; then echo 'cist converter 1.0'; exit 0; fi
21 if [ "$1" = "--help" ]; then
22     echo "Usage: $0 [--help | --version] | [-q|--quiet] [[академ_група]
   файл_із_cist.csv]"
23     echo 'Convert schedule.csv from CIST format into Google Calendar
   format'
24     echo -e " --help \t\tPrint this help message and exit"
25     echo -e " --version \t\tPrint version info and exit"
26     echo -e " -q, --quiet \t\tDo not print the result to stdout"
27     echo -e " академ_група \t\tOptional group name"
28     echo -e " файл_із_cist.csv \tCSV file to process"
29     exit 0;
30 fi
31
32 exec 3>&1;
33 if [ "$1" = "-q" -o "$1" = "--quiet" ]; then exec 3>/dev/null; shift;
   fi
34
35 if [ $# -eq 2 ]; then group="$1"; shift; fi
36 if [ $# -eq 1 ]; then csv="$1"; fi
37
38 csvs=$(ls TimeTable_??_??_20??.csv 2>/dev/null | sort)
39
40 if [ -z "$csv" ]; then csv=$(select_from "$csvs") || exit 0; fi
41
42 if [ ! -f "$csv" ]; then error "file '$csv' is not exist" 1; fi
43 if [ ! -r "$csv" ]; then error "permission to read file '$csv' denied"
   2; fi
44
45 csv_data=$( cat "$csv" | sed 's/\r/\n/g' | iconv -f cp1251 -t utf8 )
46
47 groups=$(
                                                                            8

48     echo "$csv_data" \
49     | awk -v FPAT='[^,]*|"[^"]*"' '
50         NR > 1 {
51              gsub(/^"/, "", $1);
52              if (split($1, res, " - ") != 1) print res[1]
53         }
54     ' \
55     | sort \
56     | uniq
57 )
58
59 if [ -z "$group" ]; then group=$(select_from "$groups" "skip") || exit
   0; fi
60
61 if ! echo "$groups" | grep "$group"; then
62     echo "No '$group' group in '$csv'."
63     group=$(select_from "$groups" "skip") || exit 0;
64 fi
65
66 echo "$csv_data" \
67 | awk -v FPAT='[^,]*|"[^"]*"' -v pattern="$([ -n "$group" ] && echo
   "^\"$group - ")" '
68     function time_fmt(time) {
69         gsub(/:|"/, " ", time)
70         return strftime("%I:%M %p", mktime("1970 01 01" time))
71     }
72
73     function date_fmt(date) {
74         gsub(/"/, "", date)
75         split(date, dp, ".")
76         return strftime("%m/%d/%Y", mktime(dp[3] " " dp[2] " " dp[1] "
   00 00 00"))
77     }
78
79     NR==1 { print "Subject,Start Date,Start Time,End Date,End
   Time,Description" }
80
81     NR!=1 && $1 ~ pattern {
82         gsub(pattern "|^\"|\"$", "", $1)
83
84         printf("\"%s; №%d\",%s,%s,%s,%s,%s\n",
85              $1, ++lessons[$2], date_fmt($2), time_fmt($3),
   date_fmt($4), time_fmt($5), $12)
86     }
87 ' \
88 | tee "Google_$(basename "$csv")" >&3
